{"code":"ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"],(function(e,t,n){\"use strict\";var r=e(\"../../lib/oop\"),o=e(\"./fold_mode\").FoldMode,i=e(\"../../range\").Range,g=t.FoldMode=function(){};r.inherits(g,o),function(){this.getFoldWidgetRange=function(e,t,n){var r=this.indentationBlock(e,n);if(r)return r;var o=/\\S/,g=e.getLine(n),s=g.search(o);if(-1!=s&&\"#\"==g[s]){for(var a=g.length,x=e.getLength(),l=n,c=n;++n<x;){var d=(g=e.getLine(n)).search(o);if(-1!=d){if(\"#\"!=g[d])break;c=n}}if(c>l){var u=e.getLine(c).length;return new i(l,a,c,u)}}},this.getFoldWidget=function(e,t,n){var r=e.getLine(n),o=r.search(/\\S/),i=e.getLine(n+1),g=e.getLine(n-1),s=g.search(/\\S/),a=i.search(/\\S/);if(-1==o)return e.foldWidgets[n-1]=-1!=s&&s<a?\"start\":\"\",\"\";if(-1==s){if(o==a&&\"#\"==r[o]&&\"#\"==i[o])return e.foldWidgets[n-1]=\"\",e.foldWidgets[n+1]=\"\",\"start\"}else if(s==o&&\"#\"==r[o]&&\"#\"==g[o]&&-1==e.getLine(n-2).search(/\\S/))return e.foldWidgets[n-1]=\"start\",e.foldWidgets[n+1]=\"\",\"\";return e.foldWidgets[n-1]=-1!=s&&s<o?\"start\":\"\",o<a?\"start\":\"\"}}.call(g.prototype)})),ace.define(\"ace/mode/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/text_highlight_rules\",\"ace/mode/folding/coffee\"],(function(e,t,n){\"use strict\";var r=e(\"../lib/oop\"),o=e(\"./text\").Mode,i=e(\"./text_highlight_rules\").TextHighlightRules,g=function(){var e=\"SELECTION|CURRENT_WORD|SELECTED_TEXT|CURRENT_LINE|LINE_INDEX|LINE_NUMBER|SOFT_TABS|TAB_SIZE|FILENAME|FILEPATH|FULLNAME\";this.$rules={start:[{token:\"constant.language.escape\",regex:/\\\\[\\$}`\\\\]/},{token:\"keyword\",regex:\"\\\\$(?:TM_)?(?:\"+e+\")\\\\b\"},{token:\"variable\",regex:\"\\\\$\\\\w+\"},{onMatch:function(e,t,n){return n[1]?n[1]++:n.unshift(t,1),this.tokenName},tokenName:\"markup.list\",regex:\"\\\\${\",next:\"varDecl\"},{onMatch:function(e,t,n){return n[1]?(n[1]--,n[1]||n.splice(0,2),this.tokenName):\"text\"},tokenName:\"markup.list\",regex:\"}\"},{token:\"doc.comment\",regex:/^\\${2}-{5,}$/}],varDecl:[{regex:/\\d+\\b/,token:\"constant.numeric\"},{token:\"keyword\",regex:\"(?:TM_)?(?:\"+e+\")\\\\b\"},{token:\"variable\",regex:\"\\\\w+\"},{regex:/:/,token:\"punctuation.operator\",next:\"start\"},{regex:/\\//,token:\"string.regex\",next:\"regexp\"},{regex:\"\",next:\"start\"}],regexp:[{regex:/\\\\./,token:\"escape\"},{regex:/\\[/,token:\"regex.start\",next:\"charClass\"},{regex:\"/\",token:\"string.regex\",next:\"format\"},{token:\"string.regex\",regex:\".\"}],charClass:[{regex:\"\\\\.\",token:\"escape\"},{regex:\"\\\\]\",token:\"regex.end\",next:\"regexp\"},{token:\"string.regex\",regex:\".\"}],format:[{regex:/\\\\[ulULE]/,token:\"keyword\"},{regex:/\\$\\d+/,token:\"variable\"},{regex:\"/[gim]*:?\",token:\"string.regex\",next:\"start\"},{token:\"string\",regex:\".\"}]}};r.inherits(g,i),t.SnippetHighlightRules=g;var s=function(){this.$rules={start:[{token:\"text\",regex:\"^\\\\t\",next:\"sn-start\"},{token:\"invalid\",regex:/^ \\s*/},{token:\"comment\",regex:/^#.*/},{token:\"constant.language.escape\",regex:\"^regex \",next:\"regex\"},{token:\"constant.language.escape\",regex:\"^(trigger|endTrigger|name|snippet|guard|endGuard|tabTrigger|key)\\\\b\"}],regex:[{token:\"text\",regex:\"\\\\.\"},{token:\"keyword\",regex:\"/\"},{token:\"empty\",regex:\"$\",next:\"start\"}]},this.embedRules(g,\"sn-\",[{token:\"text\",regex:\"^\\\\t\",next:\"sn-start\"},{onMatch:function(e,t,n){return n.splice(n.length),this.tokenName},tokenName:\"text\",regex:\"^(?!\\t)\",next:\"start\"}])};r.inherits(s,i),t.SnippetGroupHighlightRules=s;var a=e(\"./folding/coffee\").FoldMode,x=function(){this.HighlightRules=s,this.foldingRules=new a,this.$behaviour=this.$defaultBehaviour};r.inherits(x,o),function(){this.$indentWithTabs=!0,this.lineCommentStart=\"#\",this.$id=\"ace/mode/snippets\",this.snippetFileId=\"ace/snippets/snippets\"}.call(x.prototype),t.Mode=x})),ace.require([\"ace/mode/snippets\"],(function(e){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=e)}));","name":"bd82757a59fac35f7323d8c129dd177f.js","input":"ace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n  var Range = require(\"../../range\").Range;\n  var FoldMode = exports.FoldMode = function () {};\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/snippets\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/text_highlight_rules\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n  var TextMode = require(\"./text\").Mode;\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n  var SnippetHighlightRules = function SnippetHighlightRules() {\n    var builtins = \"SELECTION|CURRENT_WORD|SELECTED_TEXT|CURRENT_LINE|LINE_INDEX|\" + \"LINE_NUMBER|SOFT_TABS|TAB_SIZE|FILENAME|FILEPATH|FULLNAME\";\n    this.$rules = {\n      \"start\": [{\n        token: \"constant.language.escape\",\n        regex: /\\\\[\\$}`\\\\]/\n      }, {\n        token: \"keyword\",\n        regex: \"\\\\$(?:TM_)?(?:\" + builtins + \")\\\\b\"\n      }, {\n        token: \"variable\",\n        regex: \"\\\\$\\\\w+\"\n      }, {\n        onMatch: function onMatch(value, state, stack) {\n          if (stack[1]) stack[1]++;else stack.unshift(state, 1);\n          return this.tokenName;\n        },\n        tokenName: \"markup.list\",\n        regex: \"\\\\${\",\n        next: \"varDecl\"\n      }, {\n        onMatch: function onMatch(value, state, stack) {\n          if (!stack[1]) return \"text\";\n          stack[1]--;\n          if (!stack[1]) stack.splice(0, 2);\n          return this.tokenName;\n        },\n        tokenName: \"markup.list\",\n        regex: \"}\"\n      }, {\n        token: \"doc.comment\",\n        regex: /^\\${2}-{5,}$/\n      }],\n      \"varDecl\": [{\n        regex: /\\d+\\b/,\n        token: \"constant.numeric\"\n      }, {\n        token: \"keyword\",\n        regex: \"(?:TM_)?(?:\" + builtins + \")\\\\b\"\n      }, {\n        token: \"variable\",\n        regex: \"\\\\w+\"\n      }, {\n        regex: /:/,\n        token: \"punctuation.operator\",\n        next: \"start\"\n      }, {\n        regex: /\\//,\n        token: \"string.regex\",\n        next: \"regexp\"\n      }, {\n        regex: \"\",\n        next: \"start\"\n      }],\n      \"regexp\": [{\n        regex: /\\\\./,\n        token: \"escape\"\n      }, {\n        regex: /\\[/,\n        token: \"regex.start\",\n        next: \"charClass\"\n      }, {\n        regex: \"/\",\n        token: \"string.regex\",\n        next: \"format\"\n      }, {\n        \"token\": \"string.regex\",\n        regex: \".\"\n      }],\n      charClass: [{\n        regex: \"\\\\.\",\n        token: \"escape\"\n      }, {\n        regex: \"\\\\]\",\n        token: \"regex.end\",\n        next: \"regexp\"\n      }, {\n        \"token\": \"string.regex\",\n        regex: \".\"\n      }],\n      \"format\": [{\n        regex: /\\\\[ulULE]/,\n        token: \"keyword\"\n      }, {\n        regex: /\\$\\d+/,\n        token: \"variable\"\n      }, {\n        regex: \"/[gim]*:?\",\n        token: \"string.regex\",\n        next: \"start\"\n      }, {\n        \"token\": \"string\",\n        regex: \".\"\n      }]\n    };\n  };\n  oop.inherits(SnippetHighlightRules, TextHighlightRules);\n  exports.SnippetHighlightRules = SnippetHighlightRules;\n  var SnippetGroupHighlightRules = function SnippetGroupHighlightRules() {\n    this.$rules = {\n      \"start\": [{\n        token: \"text\",\n        regex: \"^\\\\t\",\n        next: \"sn-start\"\n      }, {\n        token: \"invalid\",\n        regex: /^ \\s*/\n      }, {\n        token: \"comment\",\n        regex: /^#.*/\n      }, {\n        token: \"constant.language.escape\",\n        regex: \"^regex \",\n        next: \"regex\"\n      }, {\n        token: \"constant.language.escape\",\n        regex: \"^(trigger|endTrigger|name|snippet|guard|endGuard|tabTrigger|key)\\\\b\"\n      }],\n      \"regex\": [{\n        token: \"text\",\n        regex: \"\\\\.\"\n      }, {\n        token: \"keyword\",\n        regex: \"/\"\n      }, {\n        token: \"empty\",\n        regex: \"$\",\n        next: \"start\"\n      }]\n    };\n    this.embedRules(SnippetHighlightRules, \"sn-\", [{\n      token: \"text\",\n      regex: \"^\\\\t\",\n      next: \"sn-start\"\n    }, {\n      onMatch: function onMatch(value, state, stack) {\n        stack.splice(stack.length);\n        return this.tokenName;\n      },\n      tokenName: \"text\",\n      regex: \"^(?!\\t)\",\n      next: \"start\"\n    }]);\n  };\n  oop.inherits(SnippetGroupHighlightRules, TextHighlightRules);\n  exports.SnippetGroupHighlightRules = SnippetGroupHighlightRules;\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n  var Mode = function Mode() {\n    this.HighlightRules = SnippetGroupHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$indentWithTabs = true;\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/snippets\";\n    this.snippetFileId = \"ace/snippets/snippets\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n(function () {\n  ace.require([\"ace/mode/snippets\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","inputSourceMap":null}