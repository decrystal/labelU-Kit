{"code":"ace.define(\"ace/ext/elastic_tabstops_lite\",[\"require\",\"exports\",\"module\",\"ace/editor\",\"ace/config\"],(function(t,e,s){\"use strict\";var i=function(t){this.$editor=t;var e=this,s=[],i=!1;this.onAfterExec=function(){i=!1,e.processRows(s),s=[]},this.onExec=function(){i=!0},this.onChange=function(t){i&&(-1==s.indexOf(t.start.row)&&s.push(t.start.row),t.end.row!=t.start.row&&s.push(t.end.row))}};(function(){this.processRows=function(t){this.$inChange=!0;for(var e=[],s=0,i=t.length;s<i;s++){var o=t[s];if(!(e.indexOf(o)>-1))for(var n=this.$findCellWidthsForBlock(o),r=this.$setBlockCellWidthsToMax(n.cellWidths),h=n.firstRow,a=0,c=r.length;a<c;a++){var l=r[a];e.push(h),this.$adjustRow(h,l),h++}}this.$inChange=!1},this.$findCellWidthsForBlock=function(t){for(var e,s=[],i=t;i>=0&&0!=(e=this.$cellWidthsForRow(i)).length;)s.unshift(e),i--;var o=i+1;i=t;for(var n=this.$editor.session.getLength();i<n-1&&(i++,0!=(e=this.$cellWidthsForRow(i)).length);)s.push(e);return{cellWidths:s,firstRow:o}},this.$cellWidthsForRow=function(t){for(var e=this.$selectionColumnsForRow(t),s=[-1].concat(this.$tabsForRow(t)),i=s.map((function(t){return 0})).slice(1),o=this.$editor.session.getLine(t),n=0,r=s.length-1;n<r;n++){var h=s[n]+1,a=s[n+1],c=this.$rightmostSelectionInCell(e,a),l=o.substring(h,a);i[n]=Math.max(l.replace(/\\s+$/g,\"\").length,c-h)}return i},this.$selectionColumnsForRow=function(t){var e=[],s=this.$editor.getCursorPosition();return this.$editor.session.getSelection().isEmpty()&&t==s.row&&e.push(s.column),e},this.$setBlockCellWidthsToMax=function(t){for(var e,s,i,o=!0,n=this.$izip_longest(t),r=0,h=n.length;r<h;r++){var a=n[r];if(a.push){a.push(NaN);for(var c=0,l=a.length;c<l;c++){var u=a[c];if(o&&(e=c,i=0,o=!1),isNaN(u)){s=c;for(var f=e;f<s;f++)t[f][r]=i;o=!0}i=Math.max(i,u)}}}return t},this.$rightmostSelectionInCell=function(t,e){var s=0;if(t.length){for(var i=[],o=0,n=t.length;o<n;o++)t[o]<=e?i.push(o):i.push(0);s=Math.max.apply(Math,i)}return s},this.$tabsForRow=function(t){for(var e,s=[],i=this.$editor.session.getLine(t),o=/\\t/g;null!=(e=o.exec(i));)s.push(e.index);return s},this.$adjustRow=function(t,e){var s=this.$tabsForRow(t);if(0!=s.length)for(var i=0,o=-1,n=this.$izip(e,s),r=0,h=n.length;r<h;r++){var a=n[r][0],c=n[r][1],l=(o+=1+a)-(c+=i);if(0!=l){var u=this.$editor.session.getLine(t).substr(0,c),f=u.replace(/\\s*$/g,\"\"),p=u.length-f.length;l>0&&(this.$editor.session.getDocument().insertInLine({row:t,column:c+1},Array(l+1).join(\" \")+\"\\t\"),this.$editor.session.getDocument().removeInLine(t,c,c+1),i+=l),l<0&&p>=-l&&(this.$editor.session.getDocument().removeInLine(t,c+l,c),i+=l)}}},this.$izip_longest=function(t){if(!t[0])return[];for(var e=t[0].length,s=t.length,i=1;i<s;i++){var o=t[i].length;o>e&&(e=o)}for(var n=[],r=0;r<e;r++){var h=[];for(i=0;i<s;i++)\"\"===t[i][r]?h.push(NaN):h.push(t[i][r]);n.push(h)}return n},this.$izip=function(t,e){for(var s=t.length>=e.length?e.length:t.length,i=[],o=0;o<s;o++){var n=[t[o],e[o]];i.push(n)}return i}}).call(i.prototype),e.ElasticTabstopsLite=i;var o=t(\"../editor\").Editor;t(\"../config\").defineOptions(o.prototype,\"editor\",{useElasticTabstops:{set:function(t){t?(this.elasticTabstops||(this.elasticTabstops=new i(this)),this.commands.on(\"afterExec\",this.elasticTabstops.onAfterExec),this.commands.on(\"exec\",this.elasticTabstops.onExec),this.on(\"change\",this.elasticTabstops.onChange)):this.elasticTabstops&&(this.commands.removeListener(\"afterExec\",this.elasticTabstops.onAfterExec),this.commands.removeListener(\"exec\",this.elasticTabstops.onExec),this.removeListener(\"change\",this.elasticTabstops.onChange))}}})})),ace.require([\"ace/ext/elastic_tabstops_lite\"],(function(t){\"object\"==typeof module&&\"object\"==typeof exports&&module&&(module.exports=t)}));","name":"5c5a3d84b5476f0d498f272a19da47ab.js","input":"ace.define(\"ace/ext/elastic_tabstops_lite\", [\"require\", \"exports\", \"module\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  \"use strict\";\n\n  var ElasticTabstopsLite = function ElasticTabstopsLite(editor) {\n    this.$editor = editor;\n    var self = this;\n    var changedRows = [];\n    var recordChanges = false;\n    this.onAfterExec = function () {\n      recordChanges = false;\n      self.processRows(changedRows);\n      changedRows = [];\n    };\n    this.onExec = function () {\n      recordChanges = true;\n    };\n    this.onChange = function (delta) {\n      if (recordChanges) {\n        if (changedRows.indexOf(delta.start.row) == -1) changedRows.push(delta.start.row);\n        if (delta.end.row != delta.start.row) changedRows.push(delta.end.row);\n      }\n    };\n  };\n  (function () {\n    this.processRows = function (rows) {\n      this.$inChange = true;\n      var checkedRows = [];\n      for (var r = 0, rowCount = rows.length; r < rowCount; r++) {\n        var row = rows[r];\n        if (checkedRows.indexOf(row) > -1) continue;\n        var cellWidthObj = this.$findCellWidthsForBlock(row);\n        var cellWidths = this.$setBlockCellWidthsToMax(cellWidthObj.cellWidths);\n        var rowIndex = cellWidthObj.firstRow;\n        for (var w = 0, l = cellWidths.length; w < l; w++) {\n          var widths = cellWidths[w];\n          checkedRows.push(rowIndex);\n          this.$adjustRow(rowIndex, widths);\n          rowIndex++;\n        }\n      }\n      this.$inChange = false;\n    };\n    this.$findCellWidthsForBlock = function (row) {\n      var cellWidths = [],\n        widths;\n      var rowIter = row;\n      while (rowIter >= 0) {\n        widths = this.$cellWidthsForRow(rowIter);\n        if (widths.length == 0) break;\n        cellWidths.unshift(widths);\n        rowIter--;\n      }\n      var firstRow = rowIter + 1;\n      rowIter = row;\n      var numRows = this.$editor.session.getLength();\n      while (rowIter < numRows - 1) {\n        rowIter++;\n        widths = this.$cellWidthsForRow(rowIter);\n        if (widths.length == 0) break;\n        cellWidths.push(widths);\n      }\n      return {\n        cellWidths: cellWidths,\n        firstRow: firstRow\n      };\n    };\n    this.$cellWidthsForRow = function (row) {\n      var selectionColumns = this.$selectionColumnsForRow(row);\n      var tabs = [-1].concat(this.$tabsForRow(row));\n      var widths = tabs.map(function (el) {\n        return 0;\n      }).slice(1);\n      var line = this.$editor.session.getLine(row);\n      for (var i = 0, len = tabs.length - 1; i < len; i++) {\n        var leftEdge = tabs[i] + 1;\n        var rightEdge = tabs[i + 1];\n        var rightmostSelection = this.$rightmostSelectionInCell(selectionColumns, rightEdge);\n        var cell = line.substring(leftEdge, rightEdge);\n        widths[i] = Math.max(cell.replace(/\\s+$/g, '').length, rightmostSelection - leftEdge);\n      }\n      return widths;\n    };\n    this.$selectionColumnsForRow = function (row) {\n      var selections = [],\n        cursor = this.$editor.getCursorPosition();\n      if (this.$editor.session.getSelection().isEmpty()) {\n        if (row == cursor.row) selections.push(cursor.column);\n      }\n      return selections;\n    };\n    this.$setBlockCellWidthsToMax = function (cellWidths) {\n      var startingNewBlock = true,\n        blockStartRow,\n        blockEndRow,\n        maxWidth;\n      var columnInfo = this.$izip_longest(cellWidths);\n      for (var c = 0, l = columnInfo.length; c < l; c++) {\n        var column = columnInfo[c];\n        if (!column.push) {\n          console.error(column);\n          continue;\n        }\n        column.push(NaN);\n        for (var r = 0, s = column.length; r < s; r++) {\n          var width = column[r];\n          if (startingNewBlock) {\n            blockStartRow = r;\n            maxWidth = 0;\n            startingNewBlock = false;\n          }\n          if (isNaN(width)) {\n            blockEndRow = r;\n            for (var j = blockStartRow; j < blockEndRow; j++) {\n              cellWidths[j][c] = maxWidth;\n            }\n            startingNewBlock = true;\n          }\n          maxWidth = Math.max(maxWidth, width);\n        }\n      }\n      return cellWidths;\n    };\n    this.$rightmostSelectionInCell = function (selectionColumns, cellRightEdge) {\n      var rightmost = 0;\n      if (selectionColumns.length) {\n        var lengths = [];\n        for (var s = 0, length = selectionColumns.length; s < length; s++) {\n          if (selectionColumns[s] <= cellRightEdge) lengths.push(s);else lengths.push(0);\n        }\n        rightmost = Math.max.apply(Math, lengths);\n      }\n      return rightmost;\n    };\n    this.$tabsForRow = function (row) {\n      var rowTabs = [],\n        line = this.$editor.session.getLine(row),\n        re = /\\t/g,\n        match;\n      while ((match = re.exec(line)) != null) {\n        rowTabs.push(match.index);\n      }\n      return rowTabs;\n    };\n    this.$adjustRow = function (row, widths) {\n      var rowTabs = this.$tabsForRow(row);\n      if (rowTabs.length == 0) return;\n      var bias = 0,\n        location = -1;\n      var expandedSet = this.$izip(widths, rowTabs);\n      for (var i = 0, l = expandedSet.length; i < l; i++) {\n        var w = expandedSet[i][0],\n          it = expandedSet[i][1];\n        location += 1 + w;\n        it += bias;\n        var difference = location - it;\n        if (difference == 0) continue;\n        var partialLine = this.$editor.session.getLine(row).substr(0, it);\n        var strippedPartialLine = partialLine.replace(/\\s*$/g, \"\");\n        var ispaces = partialLine.length - strippedPartialLine.length;\n        if (difference > 0) {\n          this.$editor.session.getDocument().insertInLine({\n            row: row,\n            column: it + 1\n          }, Array(difference + 1).join(\" \") + \"\\t\");\n          this.$editor.session.getDocument().removeInLine(row, it, it + 1);\n          bias += difference;\n        }\n        if (difference < 0 && ispaces >= -difference) {\n          this.$editor.session.getDocument().removeInLine(row, it + difference, it);\n          bias += difference;\n        }\n      }\n    };\n    this.$izip_longest = function (iterables) {\n      if (!iterables[0]) return [];\n      var longest = iterables[0].length;\n      var iterablesLength = iterables.length;\n      for (var i = 1; i < iterablesLength; i++) {\n        var iLength = iterables[i].length;\n        if (iLength > longest) longest = iLength;\n      }\n      var expandedSet = [];\n      for (var l = 0; l < longest; l++) {\n        var set = [];\n        for (var i = 0; i < iterablesLength; i++) {\n          if (iterables[i][l] === \"\") set.push(NaN);else set.push(iterables[i][l]);\n        }\n        expandedSet.push(set);\n      }\n      return expandedSet;\n    };\n    this.$izip = function (widths, tabs) {\n      var size = widths.length >= tabs.length ? tabs.length : widths.length;\n      var expandedSet = [];\n      for (var i = 0; i < size; i++) {\n        var set = [widths[i], tabs[i]];\n        expandedSet.push(set);\n      }\n      return expandedSet;\n    };\n  }).call(ElasticTabstopsLite.prototype);\n  exports.ElasticTabstopsLite = ElasticTabstopsLite;\n  var Editor = require(\"../editor\").Editor;\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    useElasticTabstops: {\n      set: function set(val) {\n        if (val) {\n          if (!this.elasticTabstops) this.elasticTabstops = new ElasticTabstopsLite(this);\n          this.commands.on(\"afterExec\", this.elasticTabstops.onAfterExec);\n          this.commands.on(\"exec\", this.elasticTabstops.onExec);\n          this.on(\"change\", this.elasticTabstops.onChange);\n        } else if (this.elasticTabstops) {\n          this.commands.removeListener(\"afterExec\", this.elasticTabstops.onAfterExec);\n          this.commands.removeListener(\"exec\", this.elasticTabstops.onExec);\n          this.removeListener(\"change\", this.elasticTabstops.onChange);\n        }\n      }\n    }\n  });\n});\n(function () {\n  ace.require([\"ace/ext/elastic_tabstops_lite\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","inputSourceMap":null}