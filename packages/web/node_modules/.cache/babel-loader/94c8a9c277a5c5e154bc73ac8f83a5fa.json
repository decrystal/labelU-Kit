{"ast":null,"code":"/** @module  color-rgba */\n\n'use strict';\n\nvar parse = require('color-parse');\nmodule.exports = function rgba(color) {\n  // template literals\n  if (Array.isArray(color) && color.raw) color = String.raw.apply(null, arguments);\n  var values, i, l;\n\n  //attempt to parse non-array arguments\n  var parsed = parse(color);\n  if (!parsed.space) return [];\n  var min = [0, 0, 0],\n    max = parsed.space[0] === 'h' ? [360, 100, 100] : [255, 255, 255];\n  values = Array(3);\n  values[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0]);\n  values[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1]);\n  values[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2]);\n  if (parsed.space[0] === 'h') values = hsl2rgb(values);\n  values.push(Math.min(Math.max(parsed.alpha, 0), 1));\n  return values;\n};\n\n// excerpt from color-space/hsl\nfunction hsl2rgb(hsl) {\n  var h = hsl[0] / 360,\n    s = hsl[1] / 100,\n    l = hsl[2] / 100,\n    t1,\n    t2,\n    t3,\n    rgb,\n    val,\n    i = 0;\n  if (s === 0) return val = l * 255, [val, val, val];\n  t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  t1 = 2 * l - t2;\n  rgb = [0, 0, 0];\n  for (; i < 3;) {\n    t3 = h + 1 / 3 * -(i - 1);\n    t3 < 0 ? t3++ : t3 > 1 && t3--;\n    val = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? t2 : 3 * t3 < 2 ? t1 + (t2 - t1) * (2 / 3 - t3) * 6 : t1;\n    rgb[i++] = val * 255;\n  }\n  return rgb;\n}","map":null,"metadata":{},"sourceType":"script"}