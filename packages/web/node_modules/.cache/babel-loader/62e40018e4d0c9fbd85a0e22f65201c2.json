{"ast":null,"code":"import _classCallCheck from \"/Users/decrytal-ade/project/work/shlab/labelU-Kit/packages/web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/decrytal-ade/project/work/shlab/labelU-Kit/packages/web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport ToolStyleUtils from './ToolStyleUtils.js';\nvar DEFAULT_COLORS = [\"rgba(102, 111, 255, 1)\", \"rgba(102, 230, 255, 1)\", \"rgba(191, 255, 102, 1)\", \"rgba(255, 230, 102, 1)\", \"rgba(230, 102, 255, 1)\"];\nvar ATTRIBUTE_COLORS = [\"rgba(128, 12, 249, 1)\", \"rgba(0, 255, 48, 1)\", \"rgba(255, 136, 247, 1)\", \"rgba(255, 226, 50, 1)\", \"rgba(153, 66, 23, 1)\", \"rgba(2, 130, 250, 1)\", \"rgba(255, 35, 35, 1)\", \"rgba(0, 255, 234, 1)\"];\nvar INVALID_COLOR = \"rgba(255, 51, 51, 1)\";\nvar NULL_COLOR = \"rgba(204, 204, 204, 1)\";\nvar ToolStyleConverter = /*#__PURE__*/function () {\n  function ToolStyleConverter() {\n    _classCallCheck(this, ToolStyleConverter);\n    this._defaultColors = DEFAULT_COLORS;\n    this._attributeColors = ATTRIBUTE_COLORS;\n  }\n  _createClass(ToolStyleConverter, [{\n    key: \"defaultColors\",\n    get: function get() {\n      return this._defaultColors;\n    }\n  }, {\n    key: \"attributeColors\",\n    get: function get() {\n      return this._attributeColors;\n    }\n  }, {\n    key: \"getColorFromConfig\",\n    value: function getColorFromConfig(result, config, styleConfig, options) {\n      var _a;\n      if (Object.prototype.toString.call(config) !== \"[object Object]\") {\n        throw \"Config must be Object\";\n      }\n      if (Object.prototype.toString.call(result) !== \"[object Object]\") {\n        throw \"Result must be Object\";\n      }\n      var _styleConfig$borderOp = styleConfig.borderOpacity,\n        borderOpacity = _styleConfig$borderOp === void 0 ? 1 : _styleConfig$borderOp,\n        _styleConfig$fillOpac = styleConfig.fillOpacity,\n        fillOpacity = _styleConfig$fillOpac === void 0 ? 0.6 : _styleConfig$fillOpac,\n        _styleConfig$colorInd = styleConfig.colorIndex,\n        colorIndex = _styleConfig$colorInd === void 0 ? 0 : _styleConfig$colorInd;\n      if (!options) {\n        options = {};\n      }\n      var valid = (_a = result == null ? void 0 : result.valid) != null ? _a : true;\n      var _options = options,\n        _options$multiColorIn = _options.multiColorIndex,\n        multiColorIndex = _options$multiColorIn === void 0 ? -1 : _options$multiColorIn,\n        selected = _options.selected,\n        hover = _options.hover;\n      var defaultStatus = {\n        selected: selected,\n        hover: hover,\n        borderOpacity: borderOpacity,\n        fillOpacity: fillOpacity\n      };\n      var colorList = this.defaultColors;\n      if ((config == null ? void 0 : config.attributeConfigurable) === true || multiColorIndex > -1) {\n        colorList = this.attributeColors;\n      }\n      if (valid === false) {\n        return ToolStyleUtils.getToolStrokeAndFill(INVALID_COLOR, defaultStatus);\n      }\n      if ((config == null ? void 0 : config.attributeConfigurable) === true) {\n        var attributeIndex = ToolStyleUtils.getAttributeIndex(result == null ? void 0 : result.attribute, config == null ? void 0 : config.attributeList);\n        var color = colorList[attributeIndex % colorList.length];\n        if (attributeIndex === -1) {\n          color = NULL_COLOR;\n        }\n        return ToolStyleUtils.getToolStrokeAndFill(color, defaultStatus);\n      }\n      if (multiColorIndex > -1) {\n        return ToolStyleUtils.getToolStrokeAndFill(colorList[multiColorIndex % colorList.length], defaultStatus);\n      }\n      return ToolStyleUtils.getToolStrokeAndFill(colorList[colorIndex % colorList.length], defaultStatus);\n    }\n  }]);\n  return ToolStyleConverter;\n}();\nvar index = new ToolStyleConverter();\nexport { ATTRIBUTE_COLORS, INVALID_COLOR, NULL_COLOR, ToolStyleConverter, index as default };","map":null,"metadata":{},"sourceType":"module"}