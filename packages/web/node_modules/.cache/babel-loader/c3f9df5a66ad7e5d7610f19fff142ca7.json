{"ast":null,"code":"export var jsonParse=function jsonParse(value){return JSON.parse(value,function(k,v){try{// 将正则字符串转成正则对象\nif(eval(decodeURIComponent(v))instanceof RegExp){return eval(decodeURIComponent(v));}return v;}catch(e){return v;// nothing\n}});};export var jsonStringify=function jsonStringify(value){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;return JSON.stringify(value,function(k,v){if(v instanceof RegExp){return encodeURIComponent(v.toString());}return v;},type);};/**\n * 深度比较两个对象是否相等\n * @method compare\n * @param oldData 需要比较的值\n * @param newData 需要比较的值\n * @return {Boolean} 判断后的结果\n */export var compare=function compare(oldData,newData){if(oldData===newData)return true;var arg=Array.prototype.slice.call(arguments);var objCall=function objCall(obj,string){return Object.prototype.toString.call(obj)===\"[object \".concat(string,\"]\");};if(arg.every(function(obj){return objCall(obj,'Object');})&&Object.keys(oldData).length===Object.keys(newData).length){// @ts-ignore\nfor(var key in oldData){if(oldData.hasOwnProperty(key)&&!compare(oldData[key],newData[key]))return false;}}else if(arg.every(function(obj){return objCall(obj,'Array');})&&oldData.length===newData.length){// @ts-ignore\nfor(var _key in oldData){if(!compare(oldData[_key],newData[_key]))return false;}}else{return false;}return true;};","map":null,"metadata":{},"sourceType":"module"}