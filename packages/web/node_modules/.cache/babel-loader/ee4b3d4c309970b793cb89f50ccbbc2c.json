{"ast":null,"code":"ace.define(\"ace/ext/rtl\", [\"require\", \"exports\", \"module\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  \"use strict\";\n\n  var commands = [{\n    name: \"leftToRight\",\n    bindKey: {\n      win: \"Ctrl-Alt-Shift-L\",\n      mac: \"Command-Alt-Shift-L\"\n    },\n    exec: function exec(editor) {\n      editor.session.$bidiHandler.setRtlDirection(editor, false);\n    },\n    readOnly: true\n  }, {\n    name: \"rightToLeft\",\n    bindKey: {\n      win: \"Ctrl-Alt-Shift-R\",\n      mac: \"Command-Alt-Shift-R\"\n    },\n    exec: function exec(editor) {\n      editor.session.$bidiHandler.setRtlDirection(editor, true);\n    },\n    readOnly: true\n  }];\n  var Editor = require(\"../editor\").Editor;\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    rtlText: {\n      set: function set(val) {\n        if (val) {\n          this.on(\"change\", onChange);\n          this.on(\"changeSelection\", onChangeSelection);\n          this.renderer.on(\"afterRender\", updateLineDirection);\n          this.commands.on(\"exec\", onCommandEmitted);\n          this.commands.addCommands(commands);\n        } else {\n          this.off(\"change\", onChange);\n          this.off(\"changeSelection\", onChangeSelection);\n          this.renderer.off(\"afterRender\", updateLineDirection);\n          this.commands.off(\"exec\", onCommandEmitted);\n          this.commands.removeCommands(commands);\n          clearTextLayer(this.renderer);\n        }\n        this.renderer.updateFull();\n      }\n    },\n    rtl: {\n      set: function set(val) {\n        this.session.$bidiHandler.$isRtl = val;\n        if (val) {\n          this.setOption(\"rtlText\", false);\n          this.renderer.on(\"afterRender\", updateLineDirection);\n          this.session.$bidiHandler.seenBidi = true;\n        } else {\n          this.renderer.off(\"afterRender\", updateLineDirection);\n          clearTextLayer(this.renderer);\n        }\n        this.renderer.updateFull();\n      }\n    }\n  });\n  function onChangeSelection(e, editor) {\n    var lead = editor.getSelection().lead;\n    if (editor.session.$bidiHandler.isRtlLine(lead.row)) {\n      if (lead.column === 0) {\n        if (editor.session.$bidiHandler.isMoveLeftOperation && lead.row > 0) {\n          editor.getSelection().moveCursorTo(lead.row - 1, editor.session.getLine(lead.row - 1).length);\n        } else {\n          if (editor.getSelection().isEmpty()) lead.column += 1;else lead.setPosition(lead.row, lead.column + 1);\n        }\n      }\n    }\n  }\n  function onCommandEmitted(commadEvent) {\n    commadEvent.editor.session.$bidiHandler.isMoveLeftOperation = /gotoleft|selectleft|backspace|removewordleft/.test(commadEvent.command.name);\n  }\n  function onChange(delta, editor) {\n    var session = editor.session;\n    session.$bidiHandler.currentRow = null;\n    if (session.$bidiHandler.isRtlLine(delta.start.row) && delta.action === 'insert' && delta.lines.length > 1) {\n      for (var row = delta.start.row; row < delta.end.row; row++) {\n        if (session.getLine(row + 1).charAt(0) !== session.$bidiHandler.RLE) session.doc.$lines[row + 1] = session.$bidiHandler.RLE + session.getLine(row + 1);\n      }\n    }\n  }\n  function updateLineDirection(e, renderer) {\n    var session = renderer.session;\n    var $bidiHandler = session.$bidiHandler;\n    var cells = renderer.$textLayer.$lines.cells;\n    var width = renderer.layerConfig.width - renderer.layerConfig.padding + \"px\";\n    cells.forEach(function (cell) {\n      var style = cell.element.style;\n      if ($bidiHandler && $bidiHandler.isRtlLine(cell.row)) {\n        style.direction = \"rtl\";\n        style.textAlign = \"right\";\n        style.width = width;\n      } else {\n        style.direction = \"\";\n        style.textAlign = \"\";\n        style.width = \"\";\n      }\n    });\n  }\n  function clearTextLayer(renderer) {\n    var lines = renderer.$textLayer.$lines;\n    lines.cells.forEach(clear);\n    lines.cellCache.forEach(clear);\n    function clear(cell) {\n      var style = cell.element.style;\n      style.direction = style.textAlign = style.width = \"\";\n    }\n  }\n});\n(function () {\n  ace.require([\"ace/ext/rtl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}