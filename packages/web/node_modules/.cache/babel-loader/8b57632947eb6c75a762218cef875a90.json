{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/decrytal-ade/project/work/shlab/labelU-Kit/packages/web/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _toConsumableArray from\"/Users/decrytal-ade/project/work/shlab/labelU-Kit/packages/web/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/decrytal-ade/project/work/shlab/labelU-Kit/packages/web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{cloneDeep}from'lodash';import uuid from'./uuid';// export const DEFAULT_LINK = '@@';\n// const DEFAULT_TOOL_ATTRIBUTE = ['valid', 'invalid'];\n/**\n * 添加步骤单元\n * @param inputList 原步骤信息\n * @param isInitSubSelected 是否需要添加 subSelected\n * @param i 是否是 subSelected 进行创建\n * @param specialState // 是否需要创建一个顶层的默认属性\n */export var addInputList=function addInputList(inputList,isInitSubSelected,i,specialState){inputList=cloneDeep(inputList);var baseClassName='类别';var baseOptionName='选项';switch(specialState===null||specialState===void 0?void 0:specialState.lang){case'en':baseClassName='className';baseOptionName='optionName';break;default:{//\nbreak;}}if(i!==undefined){if(inputList[i].subSelected){var len=inputList[i].subSelected.length+1;inputList[i].subSelected.push({key:\"\".concat(baseOptionName).concat(i+1,\"-\").concat(len),value:\"option\".concat(i+1,\"-\").concat(len),isDefault:false});}else{inputList[i].subSelected=[{key:\"\".concat(baseOptionName).concat(i+1,\"-1\"),value:\"option\".concat(i+1,\"-1\"),isDefault:false}];}}else{var _len=inputList.length+1;var id=uuid(2,62);var newData={key:\"\".concat(baseClassName).concat(id),value:\"class-\".concat(id)};if((specialState===null||specialState===void 0?void 0:specialState.isMulti)===true){Object.assign(newData,{isMulti:true});}if((specialState===null||specialState===void 0?void 0:specialState.isDefault)===true){Object.assign(newData,{isDefault:true});}if(isInitSubSelected){Object.assign(newData,{subSelected:[{key:\"\".concat(baseOptionName).concat(_len,\"-1\"),value:\"option\".concat(_len,\"-1\"),isMulti:true}]});}inputList.push(newData);}return inputList;};/**\n * 清除标签的配置中的所有 default 状态\n *\n * @export\n * @param {IInputList[]} inputList\n * @param {number} index\n * @return\n */export function clearTagDefault(inputList,index){var _inputList$index,_inputList$index$subS;inputList=cloneDeep(inputList);if(!((_inputList$index=inputList[index])!==null&&_inputList$index!==void 0&&_inputList$index.subSelected)){return inputList;}inputList[index].subSelected=(_inputList$index$subS=inputList[index].subSelected)===null||_inputList$index$subS===void 0?void 0:_inputList$index$subS.map(function(v){return _objectSpread(_objectSpread({},v),{},{isDefault:false});});return inputList;}// 更改标签工具里面的对应值\nexport var changeInputList=function changeInputList(e,target,inputList,index,subIndex){inputList=cloneDeep(inputList);switch(target){case'key':if(subIndex!==undefined&&inputList[index].subSelected){inputList[index].subSelected[subIndex].key=e.target.value;}else{inputList[index].key=e.target.value;}break;case'value':if(subIndex!==undefined&&inputList[index].subSelected){inputList[index].subSelected[subIndex].value=e.target.value;}else{inputList[index].value=e.target.value;}break;case'isMulti':{var isMulti=!inputList[index].isMulti;inputList[index].isMulti=isMulti;// 初始化所有 subSelected 的值\nif(isMulti===false){inputList=clearTagDefault(inputList,index);}break;}case'isDefault':if(subIndex!==undefined&&inputList[index].subSelected){var isDefault=!inputList[index].subSelected[subIndex].isDefault;if(isDefault===true&&inputList[index].isMulti!==true){// 仅为一个 isDefault\ninputList=clearTagDefault(inputList,index);}inputList[index].subSelected[subIndex].isDefault=isDefault;}else{var newIsDefault=!inputList[index].isDefault;// 顶层更新数据更新\ninputList=inputList.map(function(v){return _objectSpread(_objectSpread({},v),{},{isDefault:false});});inputList[index].isDefault=newIsDefault;}break;}return inputList;};// 删除对应输入\nexport var deleteInputList=function deleteInputList(inputList,i,subIndex){inputList=cloneDeep(inputList);if(subIndex!==undefined){if(inputList[i].subSelected.length<=1){return inputList;}inputList[i].subSelected=[].concat(_toConsumableArray(inputList[i].subSelected.slice(0,subIndex)),_toConsumableArray(inputList[i].subSelected.slice(subIndex+1,inputList[i].subSelected.length)));}else{inputList=[].concat(_toConsumableArray(inputList.slice(0,i)),_toConsumableArray(inputList.slice(i+1,inputList.length)));}return inputList;};/**\n * 判断是否含有 key value 两个属性\n *\n * @param {Object} object\n * @returns\n */export function isHasKeyValue(object){if(typeof(object===null||object===void 0?void 0:object.key)==='string'&&typeof(object===null||object===void 0?void 0:object.value)==='string'){return(object===null||object===void 0?void 0:object.key)&&(object===null||object===void 0?void 0:object.value);}return false;}/**\n * 判断是否符合标签工具的配置 IInputList\n * @param config\n */export function judgeIsTagConfig(inputList){if(Array.isArray(inputList)){var formatNum=0;var _iterator=_createForOfIteratorHelper(inputList),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var info=_step.value;if(isHasKeyValue(info)){if(info!==null&&info!==void 0&&info.subSelected){if(Array.isArray(info===null||info===void 0?void 0:info.subSelected)){var num=0;var _iterator2=_createForOfIteratorHelper(info.subSelected),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var d=_step2.value;if(isHasKeyValue(d)){num++;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}if(num===info.subSelected.length){formatNum++;}}}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return formatNum===inputList.length;}return false;}","map":null,"metadata":{},"sourceType":"module"}