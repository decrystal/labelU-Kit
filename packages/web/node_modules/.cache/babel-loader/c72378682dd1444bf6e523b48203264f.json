{"ast":null,"code":"ace.define(\"ace/snippets\", [\"require\", \"exports\", \"module\", \"ace/lib/dom\", \"ace/lib/oop\", \"ace/lib/event_emitter\", \"ace/lib/lang\", \"ace/range\", \"ace/range_list\", \"ace/keyboard/hash_handler\", \"ace/tokenizer\", \"ace/clipboard\", \"ace/editor\"], function (require, exports, module) {\n  \"use strict\";\n\n  var dom = require(\"./lib/dom\");\n  var oop = require(\"./lib/oop\");\n  var EventEmitter = require(\"./lib/event_emitter\").EventEmitter;\n  var lang = require(\"./lib/lang\");\n  var Range = require(\"./range\").Range;\n  var RangeList = require(\"./range_list\").RangeList;\n  var HashHandler = require(\"./keyboard/hash_handler\").HashHandler;\n  var Tokenizer = require(\"./tokenizer\").Tokenizer;\n  var clipboard = require(\"./clipboard\");\n  var VARIABLES = {\n    CURRENT_WORD: function CURRENT_WORD(editor) {\n      return editor.session.getTextRange(editor.session.getWordRange());\n    },\n    SELECTION: function SELECTION(editor, name, indentation) {\n      var text = editor.session.getTextRange();\n      if (indentation) return text.replace(/\\n\\r?([ \\t]*\\S)/g, \"\\n\" + indentation + \"$1\");\n      return text;\n    },\n    CURRENT_LINE: function CURRENT_LINE(editor) {\n      return editor.session.getLine(editor.getCursorPosition().row);\n    },\n    PREV_LINE: function PREV_LINE(editor) {\n      return editor.session.getLine(editor.getCursorPosition().row - 1);\n    },\n    LINE_INDEX: function LINE_INDEX(editor) {\n      return editor.getCursorPosition().row;\n    },\n    LINE_NUMBER: function LINE_NUMBER(editor) {\n      return editor.getCursorPosition().row + 1;\n    },\n    SOFT_TABS: function SOFT_TABS(editor) {\n      return editor.session.getUseSoftTabs() ? \"YES\" : \"NO\";\n    },\n    TAB_SIZE: function TAB_SIZE(editor) {\n      return editor.session.getTabSize();\n    },\n    CLIPBOARD: function CLIPBOARD(editor) {\n      return clipboard.getText && clipboard.getText();\n    },\n    FILENAME: function FILENAME(editor) {\n      return /[^/\\\\]*$/.exec(this.FILEPATH(editor))[0];\n    },\n    FILENAME_BASE: function FILENAME_BASE(editor) {\n      return /[^/\\\\]*$/.exec(this.FILEPATH(editor))[0].replace(/\\.[^.]*$/, \"\");\n    },\n    DIRECTORY: function DIRECTORY(editor) {\n      return this.FILEPATH(editor).replace(/[^/\\\\]*$/, \"\");\n    },\n    FILEPATH: function FILEPATH(editor) {\n      return \"/not implemented.txt\";\n    },\n    WORKSPACE_NAME: function WORKSPACE_NAME() {\n      return \"Unknown\";\n    },\n    FULLNAME: function FULLNAME() {\n      return \"Unknown\";\n    },\n    BLOCK_COMMENT_START: function BLOCK_COMMENT_START(editor) {\n      var mode = editor.session.$mode || {};\n      return mode.blockComment && mode.blockComment.start || \"\";\n    },\n    BLOCK_COMMENT_END: function BLOCK_COMMENT_END(editor) {\n      var mode = editor.session.$mode || {};\n      return mode.blockComment && mode.blockComment.end || \"\";\n    },\n    LINE_COMMENT: function LINE_COMMENT(editor) {\n      var mode = editor.session.$mode || {};\n      return mode.lineCommentStart || \"\";\n    },\n    CURRENT_YEAR: date.bind(null, {\n      year: \"numeric\"\n    }),\n    CURRENT_YEAR_SHORT: date.bind(null, {\n      year: \"2-digit\"\n    }),\n    CURRENT_MONTH: date.bind(null, {\n      month: \"numeric\"\n    }),\n    CURRENT_MONTH_NAME: date.bind(null, {\n      month: \"long\"\n    }),\n    CURRENT_MONTH_NAME_SHORT: date.bind(null, {\n      month: \"short\"\n    }),\n    CURRENT_DATE: date.bind(null, {\n      day: \"2-digit\"\n    }),\n    CURRENT_DAY_NAME: date.bind(null, {\n      weekday: \"long\"\n    }),\n    CURRENT_DAY_NAME_SHORT: date.bind(null, {\n      weekday: \"short\"\n    }),\n    CURRENT_HOUR: date.bind(null, {\n      hour: \"2-digit\",\n      hour12: false\n    }),\n    CURRENT_MINUTE: date.bind(null, {\n      minute: \"2-digit\"\n    }),\n    CURRENT_SECOND: date.bind(null, {\n      second: \"2-digit\"\n    })\n  };\n  VARIABLES.SELECTED_TEXT = VARIABLES.SELECTION;\n  function date(dateFormat) {\n    var str = new Date().toLocaleString(\"en-us\", dateFormat);\n    return str.length == 1 ? \"0\" + str : str;\n  }\n  var SnippetManager = function SnippetManager() {\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n  };\n  (function () {\n    oop.implement(this, EventEmitter);\n    this.getTokenizer = function () {\n      return SnippetManager.$tokenizer || this.createTokenizer();\n    };\n    this.createTokenizer = function () {\n      function TabstopToken(str) {\n        str = str.substr(1);\n        if (/^\\d+$/.test(str)) return [{\n          tabstopId: parseInt(str, 10)\n        }];\n        return [{\n          text: str\n        }];\n      }\n      function escape(ch) {\n        return \"(?:[^\\\\\\\\\" + ch + \"]|\\\\\\\\.)\";\n      }\n      var formatMatcher = {\n        regex: \"/(\" + escape(\"/\") + \"+)/\",\n        onMatch: function onMatch(val, state, stack) {\n          var ts = stack[0];\n          ts.fmtString = true;\n          ts.guard = val.slice(1, -1);\n          ts.flag = \"\";\n          return \"\";\n        },\n        next: \"formatString\"\n      };\n      SnippetManager.$tokenizer = new Tokenizer({\n        start: [{\n          regex: /\\\\./,\n          onMatch: function onMatch(val, state, stack) {\n            var ch = val[1];\n            if (ch == \"}\" && stack.length) {\n              val = ch;\n            } else if (\"`$\\\\\".indexOf(ch) != -1) {\n              val = ch;\n            }\n            return [val];\n          }\n        }, {\n          regex: /}/,\n          onMatch: function onMatch(val, state, stack) {\n            return [stack.length ? stack.shift() : val];\n          }\n        }, {\n          regex: /\\$(?:\\d+|\\w+)/,\n          onMatch: TabstopToken\n        }, {\n          regex: /\\$\\{[\\dA-Z_a-z]+/,\n          onMatch: function onMatch(str, state, stack) {\n            var t = TabstopToken(str.substr(1));\n            stack.unshift(t[0]);\n            return t;\n          },\n          next: \"snippetVar\"\n        }, {\n          regex: /\\n/,\n          token: \"newline\",\n          merge: false\n        }],\n        snippetVar: [{\n          regex: \"\\\\|\" + escape(\"\\\\|\") + \"*\\\\|\",\n          onMatch: function onMatch(val, state, stack) {\n            var choices = val.slice(1, -1).replace(/\\\\[,|\\\\]|,/g, function (operator) {\n              return operator.length == 2 ? operator[1] : \"\\x00\";\n            }).split(\"\\x00\").map(function (value) {\n              return {\n                value: value\n              };\n            });\n            stack[0].choices = choices;\n            return [choices[0]];\n          },\n          next: \"start\"\n        }, formatMatcher, {\n          regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\",\n          token: \"\",\n          next: \"start\"\n        }],\n        formatString: [{\n          regex: /:/,\n          onMatch: function onMatch(val, state, stack) {\n            if (stack.length && stack[0].expectElse) {\n              stack[0].expectElse = false;\n              stack[0].ifEnd = {\n                elseEnd: stack[0]\n              };\n              return [stack[0].ifEnd];\n            }\n            return \":\";\n          }\n        }, {\n          regex: /\\\\./,\n          onMatch: function onMatch(val, state, stack) {\n            var ch = val[1];\n            if (ch == \"}\" && stack.length) val = ch;else if (\"`$\\\\\".indexOf(ch) != -1) val = ch;else if (ch == \"n\") val = \"\\n\";else if (ch == \"t\") val = \"\\t\";else if (\"ulULE\".indexOf(ch) != -1) val = {\n              changeCase: ch,\n              local: ch > \"a\"\n            };\n            return [val];\n          }\n        }, {\n          regex: \"/\\\\w*}\",\n          onMatch: function onMatch(val, state, stack) {\n            var next = stack.shift();\n            if (next) next.flag = val.slice(1, -1);\n            this.next = next && next.tabstopId ? \"start\" : \"\";\n            return [next || val];\n          },\n          next: \"start\"\n        }, {\n          regex: /\\$(?:\\d+|\\w+)/,\n          onMatch: function onMatch(val, state, stack) {\n            return [{\n              text: val.slice(1)\n            }];\n          }\n        }, {\n          regex: /\\${\\w+/,\n          onMatch: function onMatch(val, state, stack) {\n            var token = {\n              text: val.slice(2)\n            };\n            stack.unshift(token);\n            return [token];\n          },\n          next: \"formatStringVar\"\n        }, {\n          regex: /\\n/,\n          token: \"newline\",\n          merge: false\n        }, {\n          regex: /}/,\n          onMatch: function onMatch(val, state, stack) {\n            var next = stack.shift();\n            this.next = next && next.tabstopId ? \"start\" : \"\";\n            return [next || val];\n          },\n          next: \"start\"\n        }],\n        formatStringVar: [{\n          regex: /:\\/\\w+}/,\n          onMatch: function onMatch(val, state, stack) {\n            var ts = stack[0];\n            ts.formatFunction = val.slice(2, -1);\n            return [stack.shift()];\n          },\n          next: \"formatString\"\n        }, formatMatcher, {\n          regex: /:[\\?\\-+]?/,\n          onMatch: function onMatch(val, state, stack) {\n            if (val[1] == \"+\") stack[0].ifEnd = stack[0];\n            if (val[1] == \"?\") stack[0].expectElse = true;\n          },\n          next: \"formatString\"\n        }, {\n          regex: \"([^:}\\\\\\\\]|\\\\\\\\.)*:?\",\n          token: \"\",\n          next: \"formatString\"\n        }]\n      });\n      return SnippetManager.$tokenizer;\n    };\n    this.tokenizeTmSnippet = function (str, startState) {\n      return this.getTokenizer().getLineTokens(str, startState).tokens.map(function (x) {\n        return x.value || x;\n      });\n    };\n    this.getVariableValue = function (editor, name, indentation) {\n      if (/^\\d+$/.test(name)) return (this.variables.__ || {})[name] || \"\";\n      if (/^[A-Z]\\d+$/.test(name)) return (this.variables[name[0] + \"__\"] || {})[name.substr(1)] || \"\";\n      name = name.replace(/^TM_/, \"\");\n      if (!this.variables.hasOwnProperty(name)) return \"\";\n      var value = this.variables[name];\n      if (typeof value == \"function\") value = this.variables[name](editor, name, indentation);\n      return value == null ? \"\" : value;\n    };\n    this.variables = VARIABLES;\n    this.tmStrFormat = function (str, ch, editor) {\n      if (!ch.fmt) return str;\n      var flag = ch.flag || \"\";\n      var re = ch.guard;\n      re = new RegExp(re, flag.replace(/[^gim]/g, \"\"));\n      var fmtTokens = typeof ch.fmt == \"string\" ? this.tokenizeTmSnippet(ch.fmt, \"formatString\") : ch.fmt;\n      var _self = this;\n      var formatted = str.replace(re, function () {\n        var oldArgs = _self.variables.__;\n        _self.variables.__ = [].slice.call(arguments);\n        var fmtParts = _self.resolveVariables(fmtTokens, editor);\n        var gChangeCase = \"E\";\n        for (var i = 0; i < fmtParts.length; i++) {\n          var ch = fmtParts[i];\n          if (typeof ch == \"object\") {\n            fmtParts[i] = \"\";\n            if (ch.changeCase && ch.local) {\n              var next = fmtParts[i + 1];\n              if (next && typeof next == \"string\") {\n                if (ch.changeCase == \"u\") fmtParts[i] = next[0].toUpperCase();else fmtParts[i] = next[0].toLowerCase();\n                fmtParts[i + 1] = next.substr(1);\n              }\n            } else if (ch.changeCase) {\n              gChangeCase = ch.changeCase;\n            }\n          } else if (gChangeCase == \"U\") {\n            fmtParts[i] = ch.toUpperCase();\n          } else if (gChangeCase == \"L\") {\n            fmtParts[i] = ch.toLowerCase();\n          }\n        }\n        _self.variables.__ = oldArgs;\n        return fmtParts.join(\"\");\n      });\n      return formatted;\n    };\n    this.tmFormatFunction = function (str, ch, editor) {\n      if (ch.formatFunction == \"upcase\") return str.toUpperCase();\n      if (ch.formatFunction == \"downcase\") return str.toLowerCase();\n      return str;\n    };\n    this.resolveVariables = function (snippet, editor) {\n      var result = [];\n      var indentation = \"\";\n      var afterNewLine = true;\n      for (var i = 0; i < snippet.length; i++) {\n        var ch = snippet[i];\n        if (typeof ch == \"string\") {\n          result.push(ch);\n          if (ch == \"\\n\") {\n            afterNewLine = true;\n            indentation = \"\";\n          } else if (afterNewLine) {\n            indentation = /^\\t*/.exec(ch)[0];\n            afterNewLine = /\\S/.test(ch);\n          }\n          continue;\n        }\n        if (!ch) continue;\n        afterNewLine = false;\n        if (ch.fmtString) {\n          var j = snippet.indexOf(ch, i + 1);\n          if (j == -1) j = snippet.length;\n          ch.fmt = snippet.slice(i + 1, j);\n          i = j;\n        }\n        if (ch.text) {\n          var value = this.getVariableValue(editor, ch.text, indentation) + \"\";\n          if (ch.fmtString) value = this.tmStrFormat(value, ch, editor);\n          if (ch.formatFunction) value = this.tmFormatFunction(value, ch, editor);\n          if (value && !ch.ifEnd) {\n            result.push(value);\n            gotoNext(ch);\n          } else if (!value && ch.ifEnd) {\n            gotoNext(ch.ifEnd);\n          }\n        } else if (ch.elseEnd) {\n          gotoNext(ch.elseEnd);\n        } else if (ch.tabstopId != null) {\n          result.push(ch);\n        } else if (ch.changeCase != null) {\n          result.push(ch);\n        }\n      }\n      function gotoNext(ch) {\n        var i1 = snippet.indexOf(ch, i + 1);\n        if (i1 != -1) i = i1;\n      }\n      return result;\n    };\n    this.insertSnippetForSelection = function (editor, snippetText) {\n      var cursor = editor.getCursorPosition();\n      var line = editor.session.getLine(cursor.row);\n      var tabString = editor.session.getTabString();\n      var indentString = line.match(/^\\s*/)[0];\n      if (cursor.column < indentString.length) indentString = indentString.slice(0, cursor.column);\n      snippetText = snippetText.replace(/\\r/g, \"\");\n      var tokens = this.tokenizeTmSnippet(snippetText);\n      tokens = this.resolveVariables(tokens, editor);\n      tokens = tokens.map(function (x) {\n        if (x == \"\\n\") return x + indentString;\n        if (typeof x == \"string\") return x.replace(/\\t/g, tabString);\n        return x;\n      });\n      var tabstops = [];\n      tokens.forEach(function (p, i) {\n        if (typeof p != \"object\") return;\n        var id = p.tabstopId;\n        var ts = tabstops[id];\n        if (!ts) {\n          ts = tabstops[id] = [];\n          ts.index = id;\n          ts.value = \"\";\n          ts.parents = {};\n        }\n        if (ts.indexOf(p) !== -1) return;\n        if (p.choices && !ts.choices) ts.choices = p.choices;\n        ts.push(p);\n        var i1 = tokens.indexOf(p, i + 1);\n        if (i1 === -1) return;\n        var value = tokens.slice(i + 1, i1);\n        var isNested = value.some(function (t) {\n          return typeof t === \"object\";\n        });\n        if (isNested && !ts.value) {\n          ts.value = value;\n        } else if (value.length && (!ts.value || typeof ts.value !== \"string\")) {\n          ts.value = value.join(\"\");\n        }\n      });\n      tabstops.forEach(function (ts) {\n        ts.length = 0;\n      });\n      var expanding = {};\n      function copyValue(val) {\n        var copy = [];\n        for (var i = 0; i < val.length; i++) {\n          var p = val[i];\n          if (typeof p == \"object\") {\n            if (expanding[p.tabstopId]) continue;\n            var j = val.lastIndexOf(p, i - 1);\n            p = copy[j] || {\n              tabstopId: p.tabstopId\n            };\n          }\n          copy[i] = p;\n        }\n        return copy;\n      }\n      for (var i = 0; i < tokens.length; i++) {\n        var p = tokens[i];\n        if (typeof p != \"object\") continue;\n        var id = p.tabstopId;\n        var ts = tabstops[id];\n        var i1 = tokens.indexOf(p, i + 1);\n        if (expanding[id]) {\n          if (expanding[id] === p) {\n            delete expanding[id];\n            Object.keys(expanding).forEach(function (parentId) {\n              ts.parents[parentId] = true;\n            });\n          }\n          continue;\n        }\n        expanding[id] = p;\n        var value = ts.value;\n        if (typeof value !== \"string\") value = copyValue(value);else if (p.fmt) value = this.tmStrFormat(value, p, editor);\n        tokens.splice.apply(tokens, [i + 1, Math.max(0, i1 - i)].concat(value, p));\n        if (ts.indexOf(p) === -1) ts.push(p);\n      }\n      var row = 0,\n        column = 0;\n      var text = \"\";\n      tokens.forEach(function (t) {\n        if (typeof t === \"string\") {\n          var lines = t.split(\"\\n\");\n          if (lines.length > 1) {\n            column = lines[lines.length - 1].length;\n            row += lines.length - 1;\n          } else column += t.length;\n          text += t;\n        } else if (t) {\n          if (!t.start) t.start = {\n            row: row,\n            column: column\n          };else t.end = {\n            row: row,\n            column: column\n          };\n        }\n      });\n      var range = editor.getSelectionRange();\n      var end = editor.session.replace(range, text);\n      var tabstopManager = new TabstopManager(editor);\n      var selectionId = editor.inVirtualSelectionMode && editor.selection.index;\n      tabstopManager.addTabstops(tabstops, range.start, end, selectionId);\n    };\n    this.insertSnippet = function (editor, snippetText) {\n      var self = this;\n      if (editor.inVirtualSelectionMode) return self.insertSnippetForSelection(editor, snippetText);\n      editor.forEachSelection(function () {\n        self.insertSnippetForSelection(editor, snippetText);\n      }, null, {\n        keepOrder: true\n      });\n      if (editor.tabstopManager) editor.tabstopManager.tabNext();\n    };\n    this.$getScope = function (editor) {\n      var scope = editor.session.$mode.$id || \"\";\n      scope = scope.split(\"/\").pop();\n      if (scope === \"html\" || scope === \"php\") {\n        if (scope === \"php\" && !editor.session.$mode.inlinePhp) scope = \"html\";\n        var c = editor.getCursorPosition();\n        var state = editor.session.getState(c.row);\n        if (typeof state === \"object\") {\n          state = state[0];\n        }\n        if (state.substring) {\n          if (state.substring(0, 3) == \"js-\") scope = \"javascript\";else if (state.substring(0, 4) == \"css-\") scope = \"css\";else if (state.substring(0, 4) == \"php-\") scope = \"php\";\n        }\n      }\n      return scope;\n    };\n    this.getActiveScopes = function (editor) {\n      var scope = this.$getScope(editor);\n      var scopes = [scope];\n      var snippetMap = this.snippetMap;\n      if (snippetMap[scope] && snippetMap[scope].includeScopes) {\n        scopes.push.apply(scopes, snippetMap[scope].includeScopes);\n      }\n      scopes.push(\"_\");\n      return scopes;\n    };\n    this.expandWithTab = function (editor, options) {\n      var self = this;\n      var result = editor.forEachSelection(function () {\n        return self.expandSnippetForSelection(editor, options);\n      }, null, {\n        keepOrder: true\n      });\n      if (result && editor.tabstopManager) editor.tabstopManager.tabNext();\n      return result;\n    };\n    this.expandSnippetForSelection = function (editor, options) {\n      var cursor = editor.getCursorPosition();\n      var line = editor.session.getLine(cursor.row);\n      var before = line.substring(0, cursor.column);\n      var after = line.substr(cursor.column);\n      var snippetMap = this.snippetMap;\n      var snippet;\n      this.getActiveScopes(editor).some(function (scope) {\n        var snippets = snippetMap[scope];\n        if (snippets) snippet = this.findMatchingSnippet(snippets, before, after);\n        return !!snippet;\n      }, this);\n      if (!snippet) return false;\n      if (options && options.dryRun) return true;\n      editor.session.doc.removeInLine(cursor.row, cursor.column - snippet.replaceBefore.length, cursor.column + snippet.replaceAfter.length);\n      this.variables.M__ = snippet.matchBefore;\n      this.variables.T__ = snippet.matchAfter;\n      this.insertSnippetForSelection(editor, snippet.content);\n      this.variables.M__ = this.variables.T__ = null;\n      return true;\n    };\n    this.findMatchingSnippet = function (snippetList, before, after) {\n      for (var i = snippetList.length; i--;) {\n        var s = snippetList[i];\n        if (s.startRe && !s.startRe.test(before)) continue;\n        if (s.endRe && !s.endRe.test(after)) continue;\n        if (!s.startRe && !s.endRe) continue;\n        s.matchBefore = s.startRe ? s.startRe.exec(before) : [\"\"];\n        s.matchAfter = s.endRe ? s.endRe.exec(after) : [\"\"];\n        s.replaceBefore = s.triggerRe ? s.triggerRe.exec(before)[0] : \"\";\n        s.replaceAfter = s.endTriggerRe ? s.endTriggerRe.exec(after)[0] : \"\";\n        return s;\n      }\n    };\n    this.snippetMap = {};\n    this.snippetNameMap = {};\n    this.register = function (snippets, scope) {\n      var snippetMap = this.snippetMap;\n      var snippetNameMap = this.snippetNameMap;\n      var self = this;\n      if (!snippets) snippets = [];\n      function wrapRegexp(src) {\n        if (src && !/^\\^?\\(.*\\)\\$?$|^\\\\b$/.test(src)) src = \"(?:\" + src + \")\";\n        return src || \"\";\n      }\n      function guardedRegexp(re, guard, opening) {\n        re = wrapRegexp(re);\n        guard = wrapRegexp(guard);\n        if (opening) {\n          re = guard + re;\n          if (re && re[re.length - 1] != \"$\") re = re + \"$\";\n        } else {\n          re = re + guard;\n          if (re && re[0] != \"^\") re = \"^\" + re;\n        }\n        return new RegExp(re);\n      }\n      function addSnippet(s) {\n        if (!s.scope) s.scope = scope || \"_\";\n        scope = s.scope;\n        if (!snippetMap[scope]) {\n          snippetMap[scope] = [];\n          snippetNameMap[scope] = {};\n        }\n        var map = snippetNameMap[scope];\n        if (s.name) {\n          var old = map[s.name];\n          if (old) self.unregister(old);\n          map[s.name] = s;\n        }\n        snippetMap[scope].push(s);\n        if (s.prefix) s.tabTrigger = s.prefix;\n        if (!s.content && s.body) s.content = Array.isArray(s.body) ? s.body.join(\"\\n\") : s.body;\n        if (s.tabTrigger && !s.trigger) {\n          if (!s.guard && /^\\w/.test(s.tabTrigger)) s.guard = \"\\\\b\";\n          s.trigger = lang.escapeRegExp(s.tabTrigger);\n        }\n        if (!s.trigger && !s.guard && !s.endTrigger && !s.endGuard) return;\n        s.startRe = guardedRegexp(s.trigger, s.guard, true);\n        s.triggerRe = new RegExp(s.trigger);\n        s.endRe = guardedRegexp(s.endTrigger, s.endGuard, true);\n        s.endTriggerRe = new RegExp(s.endTrigger);\n      }\n      if (Array.isArray(snippets)) {\n        snippets.forEach(addSnippet);\n      } else {\n        Object.keys(snippets).forEach(function (key) {\n          addSnippet(snippets[key]);\n        });\n      }\n      this._signal(\"registerSnippets\", {\n        scope: scope\n      });\n    };\n    this.unregister = function (snippets, scope) {\n      var snippetMap = this.snippetMap;\n      var snippetNameMap = this.snippetNameMap;\n      function removeSnippet(s) {\n        var nameMap = snippetNameMap[s.scope || scope];\n        if (nameMap && nameMap[s.name]) {\n          delete nameMap[s.name];\n          var map = snippetMap[s.scope || scope];\n          var i = map && map.indexOf(s);\n          if (i >= 0) map.splice(i, 1);\n        }\n      }\n      if (snippets.content) removeSnippet(snippets);else if (Array.isArray(snippets)) snippets.forEach(removeSnippet);\n    };\n    this.parseSnippetFile = function (str) {\n      str = str.replace(/\\r/g, \"\");\n      var list = [],\n        snippet = {};\n      var re = /^#.*|^({[\\s\\S]*})\\s*$|^(\\S+) (.*)$|^((?:\\n*\\t.*)+)/gm;\n      var m;\n      while (m = re.exec(str)) {\n        if (m[1]) {\n          try {\n            snippet = JSON.parse(m[1]);\n            list.push(snippet);\n          } catch (e) {}\n        }\n        if (m[4]) {\n          snippet.content = m[4].replace(/^\\t/gm, \"\");\n          list.push(snippet);\n          snippet = {};\n        } else {\n          var key = m[2],\n            val = m[3];\n          if (key == \"regex\") {\n            var guardRe = /\\/((?:[^\\/\\\\]|\\\\.)*)|$/g;\n            snippet.guard = guardRe.exec(val)[1];\n            snippet.trigger = guardRe.exec(val)[1];\n            snippet.endTrigger = guardRe.exec(val)[1];\n            snippet.endGuard = guardRe.exec(val)[1];\n          } else if (key == \"snippet\") {\n            snippet.tabTrigger = val.match(/^\\S*/)[0];\n            if (!snippet.name) snippet.name = val;\n          } else if (key) {\n            snippet[key] = val;\n          }\n        }\n      }\n      return list;\n    };\n    this.getSnippetByName = function (name, editor) {\n      var snippetMap = this.snippetNameMap;\n      var snippet;\n      this.getActiveScopes(editor).some(function (scope) {\n        var snippets = snippetMap[scope];\n        if (snippets) snippet = snippets[name];\n        return !!snippet;\n      }, this);\n      return snippet;\n    };\n  }).call(SnippetManager.prototype);\n  var TabstopManager = function TabstopManager(editor) {\n    if (editor.tabstopManager) return editor.tabstopManager;\n    editor.tabstopManager = this;\n    this.$onChange = this.onChange.bind(this);\n    this.$onChangeSelection = lang.delayedCall(this.onChangeSelection.bind(this)).schedule;\n    this.$onChangeSession = this.onChangeSession.bind(this);\n    this.$onAfterExec = this.onAfterExec.bind(this);\n    this.attach(editor);\n  };\n  (function () {\n    this.attach = function (editor) {\n      this.index = 0;\n      this.ranges = [];\n      this.tabstops = [];\n      this.$openTabstops = null;\n      this.selectedTabstop = null;\n      this.editor = editor;\n      this.editor.on(\"change\", this.$onChange);\n      this.editor.on(\"changeSelection\", this.$onChangeSelection);\n      this.editor.on(\"changeSession\", this.$onChangeSession);\n      this.editor.commands.on(\"afterExec\", this.$onAfterExec);\n      this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n    };\n    this.detach = function () {\n      this.tabstops.forEach(this.removeTabstopMarkers, this);\n      this.ranges = null;\n      this.tabstops = null;\n      this.selectedTabstop = null;\n      this.editor.removeListener(\"change\", this.$onChange);\n      this.editor.removeListener(\"changeSelection\", this.$onChangeSelection);\n      this.editor.removeListener(\"changeSession\", this.$onChangeSession);\n      this.editor.commands.removeListener(\"afterExec\", this.$onAfterExec);\n      this.editor.keyBinding.removeKeyboardHandler(this.keyboardHandler);\n      this.editor.tabstopManager = null;\n      this.editor = null;\n    };\n    this.onChange = function (delta) {\n      var isRemove = delta.action[0] == \"r\";\n      var selectedTabstop = this.selectedTabstop || {};\n      var parents = selectedTabstop.parents || {};\n      var tabstops = (this.tabstops || []).slice();\n      for (var i = 0; i < tabstops.length; i++) {\n        var ts = tabstops[i];\n        var active = ts == selectedTabstop || parents[ts.index];\n        ts.rangeList.$bias = active ? 0 : 1;\n        if (delta.action == \"remove\" && ts !== selectedTabstop) {\n          var parentActive = ts.parents && ts.parents[selectedTabstop.index];\n          var startIndex = ts.rangeList.pointIndex(delta.start, parentActive);\n          startIndex = startIndex < 0 ? -startIndex - 1 : startIndex + 1;\n          var endIndex = ts.rangeList.pointIndex(delta.end, parentActive);\n          endIndex = endIndex < 0 ? -endIndex - 1 : endIndex - 1;\n          var toRemove = ts.rangeList.ranges.slice(startIndex, endIndex);\n          for (var j = 0; j < toRemove.length; j++) this.removeRange(toRemove[j]);\n        }\n        ts.rangeList.$onChange(delta);\n      }\n      var session = this.editor.session;\n      if (!this.$inChange && isRemove && session.getLength() == 1 && !session.getValue()) this.detach();\n    };\n    this.updateLinkedFields = function () {\n      var ts = this.selectedTabstop;\n      if (!ts || !ts.hasLinkedRanges || !ts.firstNonLinked) return;\n      this.$inChange = true;\n      var session = this.editor.session;\n      var text = session.getTextRange(ts.firstNonLinked);\n      for (var i = 0; i < ts.length; i++) {\n        var range = ts[i];\n        if (!range.linked) continue;\n        var original = range.original;\n        var fmt = exports.snippetManager.tmStrFormat(text, original, this.editor);\n        session.replace(range, fmt);\n      }\n      this.$inChange = false;\n    };\n    this.onAfterExec = function (e) {\n      if (e.command && !e.command.readOnly) this.updateLinkedFields();\n    };\n    this.onChangeSelection = function () {\n      if (!this.editor) return;\n      var lead = this.editor.selection.lead;\n      var anchor = this.editor.selection.anchor;\n      var isEmpty = this.editor.selection.isEmpty();\n      for (var i = 0; i < this.ranges.length; i++) {\n        if (this.ranges[i].linked) continue;\n        var containsLead = this.ranges[i].contains(lead.row, lead.column);\n        var containsAnchor = isEmpty || this.ranges[i].contains(anchor.row, anchor.column);\n        if (containsLead && containsAnchor) return;\n      }\n      this.detach();\n    };\n    this.onChangeSession = function () {\n      this.detach();\n    };\n    this.tabNext = function (dir) {\n      var max = this.tabstops.length;\n      var index = this.index + (dir || 1);\n      index = Math.min(Math.max(index, 1), max);\n      if (index == max) index = 0;\n      this.selectTabstop(index);\n      if (index === 0) this.detach();\n    };\n    this.selectTabstop = function (index) {\n      this.$openTabstops = null;\n      var ts = this.tabstops[this.index];\n      if (ts) this.addTabstopMarkers(ts);\n      this.index = index;\n      ts = this.tabstops[this.index];\n      if (!ts || !ts.length) return;\n      this.selectedTabstop = ts;\n      var range = ts.firstNonLinked || ts;\n      if (ts.choices) range.cursor = range.start;\n      if (!this.editor.inVirtualSelectionMode) {\n        var sel = this.editor.multiSelect;\n        sel.toSingleRange(range);\n        for (var i = 0; i < ts.length; i++) {\n          if (ts.hasLinkedRanges && ts[i].linked) continue;\n          sel.addRange(ts[i].clone(), true);\n        }\n      } else {\n        this.editor.selection.fromOrientedRange(range);\n      }\n      this.editor.keyBinding.addKeyboardHandler(this.keyboardHandler);\n      if (this.selectedTabstop && this.selectedTabstop.choices) this.editor.execCommand(\"startAutocomplete\", {\n        matches: this.selectedTabstop.choices\n      });\n    };\n    this.addTabstops = function (tabstops, start, end) {\n      var useLink = this.useLink || !this.editor.getOption(\"enableMultiselect\");\n      if (!this.$openTabstops) this.$openTabstops = [];\n      if (!tabstops[0]) {\n        var p = Range.fromPoints(end, end);\n        moveRelative(p.start, start);\n        moveRelative(p.end, start);\n        tabstops[0] = [p];\n        tabstops[0].index = 0;\n      }\n      var i = this.index;\n      var arg = [i + 1, 0];\n      var ranges = this.ranges;\n      tabstops.forEach(function (ts, index) {\n        var dest = this.$openTabstops[index] || ts;\n        for (var i = 0; i < ts.length; i++) {\n          var p = ts[i];\n          var range = Range.fromPoints(p.start, p.end || p.start);\n          movePoint(range.start, start);\n          movePoint(range.end, start);\n          range.original = p;\n          range.tabstop = dest;\n          ranges.push(range);\n          if (dest != ts) dest.unshift(range);else dest[i] = range;\n          if (p.fmtString || dest.firstNonLinked && useLink) {\n            range.linked = true;\n            dest.hasLinkedRanges = true;\n          } else if (!dest.firstNonLinked) dest.firstNonLinked = range;\n        }\n        if (!dest.firstNonLinked) dest.hasLinkedRanges = false;\n        if (dest === ts) {\n          arg.push(dest);\n          this.$openTabstops[index] = dest;\n        }\n        this.addTabstopMarkers(dest);\n        dest.rangeList = dest.rangeList || new RangeList();\n        dest.rangeList.$bias = 0;\n        dest.rangeList.addList(dest);\n      }, this);\n      if (arg.length > 2) {\n        if (this.tabstops.length) arg.push(arg.splice(2, 1)[0]);\n        this.tabstops.splice.apply(this.tabstops, arg);\n      }\n    };\n    this.addTabstopMarkers = function (ts) {\n      var session = this.editor.session;\n      ts.forEach(function (range) {\n        if (!range.markerId) range.markerId = session.addMarker(range, \"ace_snippet-marker\", \"text\");\n      });\n    };\n    this.removeTabstopMarkers = function (ts) {\n      var session = this.editor.session;\n      ts.forEach(function (range) {\n        session.removeMarker(range.markerId);\n        range.markerId = null;\n      });\n    };\n    this.removeRange = function (range) {\n      var i = range.tabstop.indexOf(range);\n      if (i != -1) range.tabstop.splice(i, 1);\n      i = this.ranges.indexOf(range);\n      if (i != -1) this.ranges.splice(i, 1);\n      i = range.tabstop.rangeList.ranges.indexOf(range);\n      if (i != -1) range.tabstop.splice(i, 1);\n      this.editor.session.removeMarker(range.markerId);\n      if (!range.tabstop.length) {\n        i = this.tabstops.indexOf(range.tabstop);\n        if (i != -1) this.tabstops.splice(i, 1);\n        if (!this.tabstops.length) this.detach();\n      }\n    };\n    this.keyboardHandler = new HashHandler();\n    this.keyboardHandler.bindKeys({\n      \"Tab\": function Tab(editor) {\n        if (exports.snippetManager && exports.snippetManager.expandWithTab(editor)) return;\n        editor.tabstopManager.tabNext(1);\n        editor.renderer.scrollCursorIntoView();\n      },\n      \"Shift-Tab\": function ShiftTab(editor) {\n        editor.tabstopManager.tabNext(-1);\n        editor.renderer.scrollCursorIntoView();\n      },\n      \"Esc\": function Esc(editor) {\n        editor.tabstopManager.detach();\n      }\n    });\n  }).call(TabstopManager.prototype);\n  var movePoint = function movePoint(point, diff) {\n    if (point.row == 0) point.column += diff.column;\n    point.row += diff.row;\n  };\n  var moveRelative = function moveRelative(point, start) {\n    if (point.row == start.row) point.column -= start.column;\n    point.row -= start.row;\n  };\n  dom.importCssString(\"\\n.ace_snippet-marker {\\n    -moz-box-sizing: border-box;\\n    box-sizing: border-box;\\n    background: rgba(194, 193, 208, 0.09);\\n    border: 1px dotted rgba(211, 208, 235, 0.62);\\n    position: absolute;\\n}\", \"snippets.css\", false);\n  exports.snippetManager = new SnippetManager();\n  var Editor = require(\"./editor\").Editor;\n  (function () {\n    this.insertSnippet = function (content, options) {\n      return exports.snippetManager.insertSnippet(this, content, options);\n    };\n    this.expandSnippet = function (options) {\n      return exports.snippetManager.expandWithTab(this, options);\n    };\n  }).call(Editor.prototype);\n});\nace.define(\"ace/ext/emmet\", [\"require\", \"exports\", \"module\", \"ace/keyboard/hash_handler\", \"ace/editor\", \"ace/snippets\", \"ace/range\", \"ace/config\", \"resources\", \"resources\", \"tabStops\", \"resources\", \"utils\", \"actions\"], function (require, exports, module) {\n  \"use strict\";\n\n  var HashHandler = require(\"../keyboard/hash_handler\").HashHandler;\n  var Editor = require(\"../editor\").Editor;\n  var snippetManager = require(\"../snippets\").snippetManager;\n  var Range = require(\"../range\").Range;\n  var config = require(\"../config\");\n  var emmet, emmetPath;\n  function AceEmmetEditor() {}\n  AceEmmetEditor.prototype = {\n    setupContext: function setupContext(editor) {\n      this.ace = editor;\n      this.indentation = editor.session.getTabString();\n      if (!emmet) emmet = window.emmet;\n      var resources = emmet.resources || emmet.require(\"resources\");\n      resources.setVariable(\"indentation\", this.indentation);\n      this.$syntax = null;\n      this.$syntax = this.getSyntax();\n    },\n    getSelectionRange: function getSelectionRange() {\n      var range = this.ace.getSelectionRange();\n      var doc = this.ace.session.doc;\n      return {\n        start: doc.positionToIndex(range.start),\n        end: doc.positionToIndex(range.end)\n      };\n    },\n    createSelection: function createSelection(start, end) {\n      var doc = this.ace.session.doc;\n      this.ace.selection.setRange({\n        start: doc.indexToPosition(start),\n        end: doc.indexToPosition(end)\n      });\n    },\n    getCurrentLineRange: function getCurrentLineRange() {\n      var ace = this.ace;\n      var row = ace.getCursorPosition().row;\n      var lineLength = ace.session.getLine(row).length;\n      var index = ace.session.doc.positionToIndex({\n        row: row,\n        column: 0\n      });\n      return {\n        start: index,\n        end: index + lineLength\n      };\n    },\n    getCaretPos: function getCaretPos() {\n      var pos = this.ace.getCursorPosition();\n      return this.ace.session.doc.positionToIndex(pos);\n    },\n    setCaretPos: function setCaretPos(index) {\n      var pos = this.ace.session.doc.indexToPosition(index);\n      this.ace.selection.moveToPosition(pos);\n    },\n    getCurrentLine: function getCurrentLine() {\n      var row = this.ace.getCursorPosition().row;\n      return this.ace.session.getLine(row);\n    },\n    replaceContent: function replaceContent(value, start, end, noIndent) {\n      if (end == null) end = start == null ? this.getContent().length : start;\n      if (start == null) start = 0;\n      var editor = this.ace;\n      var doc = editor.session.doc;\n      var range = Range.fromPoints(doc.indexToPosition(start), doc.indexToPosition(end));\n      editor.session.remove(range);\n      range.end = range.start;\n      value = this.$updateTabstops(value);\n      snippetManager.insertSnippet(editor, value);\n    },\n    getContent: function getContent() {\n      return this.ace.getValue();\n    },\n    getSyntax: function getSyntax() {\n      if (this.$syntax) return this.$syntax;\n      var syntax = this.ace.session.$modeId.split(\"/\").pop();\n      if (syntax == \"html\" || syntax == \"php\") {\n        var cursor = this.ace.getCursorPosition();\n        var state = this.ace.session.getState(cursor.row);\n        if (typeof state != \"string\") state = state[0];\n        if (state) {\n          state = state.split(\"-\");\n          if (state.length > 1) syntax = state[0];else if (syntax == \"php\") syntax = \"html\";\n        }\n      }\n      return syntax;\n    },\n    getProfileName: function getProfileName() {\n      var resources = emmet.resources || emmet.require(\"resources\");\n      switch (this.getSyntax()) {\n        case \"css\":\n          return \"css\";\n        case \"xml\":\n        case \"xsl\":\n          return \"xml\";\n        case \"html\":\n          var profile = resources.getVariable(\"profile\");\n          if (!profile) profile = this.ace.session.getLines(0, 2).join(\"\").search(/<!DOCTYPE[^>]+XHTML/i) != -1 ? \"xhtml\" : \"html\";\n          return profile;\n        default:\n          var mode = this.ace.session.$mode;\n          return mode.emmetConfig && mode.emmetConfig.profile || \"xhtml\";\n      }\n    },\n    prompt: function (_prompt) {\n      function prompt(_x) {\n        return _prompt.apply(this, arguments);\n      }\n      prompt.toString = function () {\n        return _prompt.toString();\n      };\n      return prompt;\n    }(function (title) {\n      return prompt(title); // eslint-disable-line no-alert\n    }),\n\n    getSelection: function getSelection() {\n      return this.ace.session.getTextRange();\n    },\n    getFilePath: function getFilePath() {\n      return \"\";\n    },\n    $updateTabstops: function $updateTabstops(value) {\n      var base = 1000;\n      var zeroBase = 0;\n      var lastZero = null;\n      var ts = emmet.tabStops || emmet.require('tabStops');\n      var resources = emmet.resources || emmet.require(\"resources\");\n      var settings = resources.getVocabulary(\"user\");\n      var tabstopOptions = {\n        tabstop: function tabstop(data) {\n          var group = parseInt(data.group, 10);\n          var isZero = group === 0;\n          if (isZero) group = ++zeroBase;else group += base;\n          var placeholder = data.placeholder;\n          if (placeholder) {\n            placeholder = ts.processText(placeholder, tabstopOptions);\n          }\n          var result = '${' + group + (placeholder ? ':' + placeholder : '') + '}';\n          if (isZero) {\n            lastZero = [data.start, result];\n          }\n          return result;\n        },\n        escape: function escape(ch) {\n          if (ch == '$') return '\\\\$';\n          if (ch == '\\\\') return '\\\\\\\\';\n          return ch;\n        }\n      };\n      value = ts.processText(value, tabstopOptions);\n      if (settings.variables['insert_final_tabstop'] && !/\\$\\{0\\}$/.test(value)) {\n        value += '${0}';\n      } else if (lastZero) {\n        var common = emmet.utils ? emmet.utils.common : emmet.require('utils');\n        value = common.replaceSubstring(value, '${0}', lastZero[0], lastZero[1]);\n      }\n      return value;\n    }\n  };\n  var keymap = {\n    expand_abbreviation: {\n      \"mac\": \"ctrl+alt+e\",\n      \"win\": \"alt+e\"\n    },\n    match_pair_outward: {\n      \"mac\": \"ctrl+d\",\n      \"win\": \"ctrl+,\"\n    },\n    match_pair_inward: {\n      \"mac\": \"ctrl+j\",\n      \"win\": \"ctrl+shift+0\"\n    },\n    matching_pair: {\n      \"mac\": \"ctrl+alt+j\",\n      \"win\": \"alt+j\"\n    },\n    next_edit_point: \"alt+right\",\n    prev_edit_point: \"alt+left\",\n    toggle_comment: {\n      \"mac\": \"command+/\",\n      \"win\": \"ctrl+/\"\n    },\n    split_join_tag: {\n      \"mac\": \"shift+command+'\",\n      \"win\": \"shift+ctrl+`\"\n    },\n    remove_tag: {\n      \"mac\": \"command+'\",\n      \"win\": \"shift+ctrl+;\"\n    },\n    evaluate_math_expression: {\n      \"mac\": \"shift+command+y\",\n      \"win\": \"shift+ctrl+y\"\n    },\n    increment_number_by_1: \"ctrl+up\",\n    decrement_number_by_1: \"ctrl+down\",\n    increment_number_by_01: \"alt+up\",\n    decrement_number_by_01: \"alt+down\",\n    increment_number_by_10: {\n      \"mac\": \"alt+command+up\",\n      \"win\": \"shift+alt+up\"\n    },\n    decrement_number_by_10: {\n      \"mac\": \"alt+command+down\",\n      \"win\": \"shift+alt+down\"\n    },\n    select_next_item: {\n      \"mac\": \"shift+command+.\",\n      \"win\": \"shift+ctrl+.\"\n    },\n    select_previous_item: {\n      \"mac\": \"shift+command+,\",\n      \"win\": \"shift+ctrl+,\"\n    },\n    reflect_css_value: {\n      \"mac\": \"shift+command+r\",\n      \"win\": \"shift+ctrl+r\"\n    },\n    encode_decode_data_url: {\n      \"mac\": \"shift+ctrl+d\",\n      \"win\": \"ctrl+'\"\n    },\n    expand_abbreviation_with_tab: \"Tab\",\n    wrap_with_abbreviation: {\n      \"mac\": \"shift+ctrl+a\",\n      \"win\": \"shift+ctrl+a\"\n    }\n  };\n  var editorProxy = new AceEmmetEditor();\n  exports.commands = new HashHandler();\n  exports.runEmmetCommand = function runEmmetCommand(editor) {\n    if (this.action == \"expand_abbreviation_with_tab\") {\n      if (!editor.selection.isEmpty()) return false;\n      var pos = editor.selection.lead;\n      var token = editor.session.getTokenAt(pos.row, pos.column);\n      if (token && /\\btag\\b/.test(token.type)) return false;\n    }\n    try {\n      editorProxy.setupContext(editor);\n      var actions = emmet.actions || emmet.require(\"actions\");\n      if (this.action == \"wrap_with_abbreviation\") {\n        return setTimeout(function () {\n          actions.run(\"wrap_with_abbreviation\", editorProxy);\n        }, 0);\n      }\n      var result = actions.run(this.action, editorProxy);\n    } catch (e) {\n      if (!emmet) {\n        var loading = exports.load(runEmmetCommand.bind(this, editor));\n        if (this.action == \"expand_abbreviation_with_tab\") return false;\n        return loading;\n      }\n      editor._signal(\"changeStatus\", typeof e == \"string\" ? e : e.message);\n      config.warn(e);\n      result = false;\n    }\n    return result;\n  };\n  for (var command in keymap) {\n    exports.commands.addCommand({\n      name: \"emmet:\" + command,\n      action: command,\n      bindKey: keymap[command],\n      exec: exports.runEmmetCommand,\n      multiSelectAction: \"forEach\"\n    });\n  }\n  exports.updateCommands = function (editor, enabled) {\n    if (enabled) {\n      editor.keyBinding.addKeyboardHandler(exports.commands);\n    } else {\n      editor.keyBinding.removeKeyboardHandler(exports.commands);\n    }\n  };\n  exports.isSupportedMode = function (mode) {\n    if (!mode) return false;\n    if (mode.emmetConfig) return true;\n    var id = mode.$id || mode;\n    return /css|less|scss|sass|stylus|html|php|twig|ejs|handlebars/.test(id);\n  };\n  exports.isAvailable = function (editor, command) {\n    if (/(evaluate_math_expression|expand_abbreviation)$/.test(command)) return true;\n    var mode = editor.session.$mode;\n    var isSupported = exports.isSupportedMode(mode);\n    if (isSupported && mode.$modes) {\n      try {\n        editorProxy.setupContext(editor);\n        if (/js|php/.test(editorProxy.getSyntax())) isSupported = false;\n      } catch (e) {}\n    }\n    return isSupported;\n  };\n  var onChangeMode = function onChangeMode(e, target) {\n    var editor = target;\n    if (!editor) return;\n    var enabled = exports.isSupportedMode(editor.session.$mode);\n    if (e.enableEmmet === false) enabled = false;\n    if (enabled) exports.load();\n    exports.updateCommands(editor, enabled);\n  };\n  exports.load = function (cb) {\n    if (typeof emmetPath !== \"string\") {\n      config.warn(\"script for emmet-core is not loaded\");\n      return false;\n    }\n    config.loadModule(emmetPath, function () {\n      emmetPath = null;\n      cb && cb();\n    });\n    return true;\n  };\n  exports.AceEmmetEditor = AceEmmetEditor;\n  config.defineOptions(Editor.prototype, \"editor\", {\n    enableEmmet: {\n      set: function set(val) {\n        this[val ? \"on\" : \"removeListener\"](\"changeMode\", onChangeMode);\n        onChangeMode({\n          enableEmmet: !!val\n        }, this);\n      },\n      value: true\n    }\n  });\n  exports.setCore = function (e) {\n    if (typeof e == \"string\") emmetPath = e;else emmet = e;\n  };\n});\n(function () {\n  ace.require([\"ace/ext/emmet\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}