{"ast":null,"code":"/**\r\n * @module color-parse\r\n */\n\n'use strict';\n\nvar names = require('color-name');\nmodule.exports = parse;\n\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\n//FIXME: use external hue detector\nvar baseHues = {\n  red: 0,\n  orange: 60,\n  yellow: 120,\n  green: 180,\n  blue: 240,\n  purple: 300\n};\n\n/**\r\n * Parse color from the string passed\r\n *\r\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n */\nfunction parse(cstr) {\n  var m,\n    parts = [],\n    alpha = 1,\n    space;\n  if (typeof cstr === 'string') {\n    //keyword\n    if (names[cstr]) {\n      parts = names[cstr].slice();\n      space = 'rgb';\n    }\n\n    //reserved words\n    else if (cstr === 'transparent') {\n      alpha = 0;\n      space = 'rgb';\n      parts = [0, 0, 0];\n    }\n\n    //hex\n    else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\n      var base = cstr.slice(1);\n      var size = base.length;\n      var isShort = size <= 4;\n      alpha = 1;\n      if (isShort) {\n        parts = [parseInt(base[0] + base[0], 16), parseInt(base[1] + base[1], 16), parseInt(base[2] + base[2], 16)];\n        if (size === 4) {\n          alpha = parseInt(base[3] + base[3], 16) / 255;\n        }\n      } else {\n        parts = [parseInt(base[0] + base[1], 16), parseInt(base[2] + base[3], 16), parseInt(base[4] + base[5], 16)];\n        if (size === 8) {\n          alpha = parseInt(base[6] + base[7], 16) / 255;\n        }\n      }\n      if (!parts[0]) parts[0] = 0;\n      if (!parts[1]) parts[1] = 0;\n      if (!parts[2]) parts[2] = 0;\n      space = 'rgb';\n    }\n\n    //color space\n    else if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n      var name = m[1];\n      var isRGB = name === 'rgb';\n      var base = name.replace(/a$/, '');\n      space = base;\n      var size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3;\n      parts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/).map(function (x, i) {\n        //<percentage>\n        if (/%$/.test(x)) {\n          //alpha\n          if (i === size) return parseFloat(x) / 100;\n          //rgb\n          if (base === 'rgb') return parseFloat(x) * 255 / 100;\n          return parseFloat(x);\n        }\n        //hue\n        else if (base[i] === 'h') {\n          //<deg>\n          if (/deg$/.test(x)) {\n            return parseFloat(x);\n          }\n          //<base-hue>\n          else if (baseHues[x] !== undefined) {\n            return baseHues[x];\n          }\n        }\n        return parseFloat(x);\n      });\n      if (name === base) parts.push(1);\n      alpha = isRGB ? 1 : parts[size] === undefined ? 1 : parts[size];\n      parts = parts.slice(0, size);\n    }\n\n    //named channels case\n    else if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\n      parts = cstr.match(/([0-9]+)/g).map(function (value) {\n        return parseFloat(value);\n      });\n      space = cstr.match(/([a-z])/ig).join('').toLowerCase();\n    }\n  }\n\n  //numeric case\n  else if (!isNaN(cstr)) {\n    space = 'rgb';\n    parts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff];\n  }\n\n  //array-like\n  else if (Array.isArray(cstr) || cstr.length) {\n    parts = [cstr[0], cstr[1], cstr[2]];\n    space = 'rgb';\n    alpha = cstr.length === 4 ? cstr[3] : 1;\n  }\n\n  //object case - detects css cases of rgb and hsl\n  else if (cstr instanceof Object) {\n    if (cstr.r != null || cstr.red != null || cstr.R != null) {\n      space = 'rgb';\n      parts = [cstr.r || cstr.red || cstr.R || 0, cstr.g || cstr.green || cstr.G || 0, cstr.b || cstr.blue || cstr.B || 0];\n    } else {\n      space = 'hsl';\n      parts = [cstr.h || cstr.hue || cstr.H || 0, cstr.s || cstr.saturation || cstr.S || 0, cstr.l || cstr.lightness || cstr.L || cstr.b || cstr.brightness];\n    }\n    alpha = cstr.a || cstr.alpha || cstr.opacity || 1;\n    if (cstr.opacity != null) alpha /= 100;\n  }\n  return {\n    space: space,\n    values: parts,\n    alpha: alpha\n  };\n}","map":null,"metadata":{},"sourceType":"script"}